
// Generated from blackbird.g4 by ANTLR 4.11.1


#include "blackbirdLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct BlackbirdLexerStaticData final {
  BlackbirdLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  BlackbirdLexerStaticData(const BlackbirdLexerStaticData&) = delete;
  BlackbirdLexerStaticData(BlackbirdLexerStaticData&&) = delete;
  BlackbirdLexerStaticData& operator=(const BlackbirdLexerStaticData&) = delete;
  BlackbirdLexerStaticData& operator=(BlackbirdLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag blackbirdlexerLexerOnceFlag;
BlackbirdLexerStaticData *blackbirdlexerLexerStaticData = nullptr;

void blackbirdlexerLexerInitialize() {
  assert(blackbirdlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<BlackbirdLexerStaticData>(
    std::vector<std::string>{
      "PLUS", "MINUS", "TIMES", "DIVIDE", "PWR", "ASSIGN", "FOR", "IN", 
      "DIGIT", "REAL", "NUMBER", "IMAG", "INT", "FLOAT", "COMPLEX", "STR", 
      "BOOL", "SEQUENCE", "PI", "NEWLINE", "TAB", "SPACE", "PROGNAME", "VERSION", 
      "TARGET", "PROGTYPE", "INCLUDE", "SQRT", "SIN", "COS", "TAN", "ARCSIN", 
      "ARCCOS", "ARCTAN", "SINH", "COSH", "TANH", "ARCSINH", "ARCCOSH", 
      "ARCTANH", "EXP", "LOG", "PERIOD", "COMMA", "COLON", "QUOTE", "LBRAC", 
      "RBRAC", "LSQBRAC", "RSQBRAC", "LBRACE", "RBRACE", "APPLY", "TYPE_ARRAY", 
      "TYPE_FLOAT", "TYPE_COMPLEX", "TYPE_INT", "TYPE_STR", "TYPE_BOOL", 
      "REGREF", "MEASURE", "NAME", "DEVICE", "COMMENT", "ANY"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'+'", "'-'", "'*'", "'/'", "'**'", "'='", "'for'", "'in'", "", 
      "", "", "", "", "", "'pi'", "", "", "", "'name'", "'version'", "'target'", 
      "'type'", "'include'", "'sqrt'", "'sin'", "'cos'", "'tan'", "'arcsin'", 
      "'arccos'", "'arctan'", "'sinh'", "'cosh'", "'tanh'", "'arcsinh'", 
      "'arccosh'", "'arctanh'", "'exp'", "'log'", "'.'", "','", "':'", "'\"'", 
      "'('", "')'", "'['", "']'", "'{'", "'}'", "'|'", "'array'", "'float'", 
      "'complex'", "'int'", "'str'", "'bool'"
    },
    std::vector<std::string>{
      "", "PLUS", "MINUS", "TIMES", "DIVIDE", "PWR", "ASSIGN", "FOR", "IN", 
      "INT", "FLOAT", "COMPLEX", "STR", "BOOL", "SEQUENCE", "PI", "NEWLINE", 
      "TAB", "SPACE", "PROGNAME", "VERSION", "TARGET", "PROGTYPE", "INCLUDE", 
      "SQRT", "SIN", "COS", "TAN", "ARCSIN", "ARCCOS", "ARCTAN", "SINH", 
      "COSH", "TANH", "ARCSINH", "ARCCOSH", "ARCTANH", "EXP", "LOG", "PERIOD", 
      "COMMA", "COLON", "QUOTE", "LBRAC", "RBRAC", "LSQBRAC", "RSQBRAC", 
      "LBRACE", "RBRACE", "APPLY", "TYPE_ARRAY", "TYPE_FLOAT", "TYPE_COMPLEX", 
      "TYPE_INT", "TYPE_STR", "TYPE_BOOL", "REGREF", "MEASURE", "NAME", 
      "DEVICE", "COMMENT", "ANY"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,61,452,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,
  	6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,4,8,153,8,8,11,8,12,8,154,1,9,1,9,1,9,3,
  	9,160,8,9,1,9,1,9,3,9,164,8,9,1,9,3,9,167,8,9,1,10,1,10,3,10,171,8,10,
  	1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,181,8,14,1,14,1,14,1,14,
  	3,14,186,8,14,1,14,1,14,1,15,1,15,5,15,192,8,15,10,15,12,15,195,9,15,
  	1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,208,8,16,
  	1,17,1,17,1,17,5,17,213,8,17,10,17,12,17,216,9,17,1,18,1,18,1,18,1,19,
  	1,19,1,19,3,19,224,8,19,1,20,1,20,1,20,1,20,1,20,3,20,231,8,20,1,21,4,
  	21,234,8,21,11,21,12,21,235,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
  	27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,
  	30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,
  	35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,
  	39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,
  	42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,
  	49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,
  	54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
  	56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,
  	59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,425,8,60,10,
  	60,12,60,428,9,60,1,61,1,61,5,61,432,8,61,10,61,12,61,435,9,61,1,62,4,
  	62,438,8,62,11,62,12,62,439,1,63,1,63,5,63,444,8,63,10,63,12,63,447,9,
  	63,1,63,1,63,1,64,1,64,0,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,0,
  	19,0,21,0,23,0,25,9,27,10,29,11,31,12,33,13,35,14,37,15,39,16,41,17,43,
  	18,45,19,47,20,49,21,51,22,53,23,55,24,57,25,59,26,61,27,63,28,65,29,
  	67,30,69,31,71,32,73,33,75,34,77,35,79,36,81,37,83,38,85,39,87,40,89,
  	41,91,42,93,43,95,44,97,45,99,46,101,47,103,48,105,49,107,50,109,51,111,
  	52,113,53,115,54,117,55,119,56,121,57,123,58,125,59,127,60,129,61,1,0,
  	10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,2,0,74,74,106,106,3,0,
  	10,10,13,13,34,34,2,0,10,10,13,13,2,0,9,9,32,32,2,0,65,90,97,122,4,0,
  	48,57,65,90,95,95,97,122,5,0,46,46,48,57,65,90,95,95,97,122,464,0,1,1,
  	0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
  	13,1,0,0,0,0,15,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
  	0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
  	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
  	53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
  	0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
  	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
  	85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
  	0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
  	0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
  	0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
  	0,0,0,127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,135,1,0,
  	0,0,7,137,1,0,0,0,9,139,1,0,0,0,11,142,1,0,0,0,13,144,1,0,0,0,15,148,
  	1,0,0,0,17,152,1,0,0,0,19,156,1,0,0,0,21,170,1,0,0,0,23,172,1,0,0,0,25,
  	175,1,0,0,0,27,177,1,0,0,0,29,180,1,0,0,0,31,189,1,0,0,0,33,207,1,0,0,
  	0,35,209,1,0,0,0,37,217,1,0,0,0,39,223,1,0,0,0,41,230,1,0,0,0,43,233,
  	1,0,0,0,45,239,1,0,0,0,47,244,1,0,0,0,49,252,1,0,0,0,51,259,1,0,0,0,53,
  	264,1,0,0,0,55,272,1,0,0,0,57,277,1,0,0,0,59,281,1,0,0,0,61,285,1,0,0,
  	0,63,289,1,0,0,0,65,296,1,0,0,0,67,303,1,0,0,0,69,310,1,0,0,0,71,315,
  	1,0,0,0,73,320,1,0,0,0,75,325,1,0,0,0,77,333,1,0,0,0,79,341,1,0,0,0,81,
  	349,1,0,0,0,83,353,1,0,0,0,85,357,1,0,0,0,87,359,1,0,0,0,89,361,1,0,0,
  	0,91,363,1,0,0,0,93,365,1,0,0,0,95,367,1,0,0,0,97,369,1,0,0,0,99,371,
  	1,0,0,0,101,373,1,0,0,0,103,375,1,0,0,0,105,377,1,0,0,0,107,379,1,0,0,
  	0,109,385,1,0,0,0,111,391,1,0,0,0,113,399,1,0,0,0,115,403,1,0,0,0,117,
  	407,1,0,0,0,119,412,1,0,0,0,121,415,1,0,0,0,123,429,1,0,0,0,125,437,1,
  	0,0,0,127,441,1,0,0,0,129,450,1,0,0,0,131,132,5,43,0,0,132,2,1,0,0,0,
  	133,134,5,45,0,0,134,4,1,0,0,0,135,136,5,42,0,0,136,6,1,0,0,0,137,138,
  	5,47,0,0,138,8,1,0,0,0,139,140,5,42,0,0,140,141,5,42,0,0,141,10,1,0,0,
  	0,142,143,5,61,0,0,143,12,1,0,0,0,144,145,5,102,0,0,145,146,5,111,0,0,
  	146,147,5,114,0,0,147,14,1,0,0,0,148,149,5,105,0,0,149,150,5,110,0,0,
  	150,16,1,0,0,0,151,153,7,0,0,0,152,151,1,0,0,0,153,154,1,0,0,0,154,152,
  	1,0,0,0,154,155,1,0,0,0,155,18,1,0,0,0,156,159,3,17,8,0,157,158,5,46,
  	0,0,158,160,3,17,8,0,159,157,1,0,0,0,159,160,1,0,0,0,160,166,1,0,0,0,
  	161,163,7,1,0,0,162,164,7,2,0,0,163,162,1,0,0,0,163,164,1,0,0,0,164,165,
  	1,0,0,0,165,167,3,17,8,0,166,161,1,0,0,0,166,167,1,0,0,0,167,20,1,0,0,
  	0,168,171,3,19,9,0,169,171,3,17,8,0,170,168,1,0,0,0,170,169,1,0,0,0,171,
  	22,1,0,0,0,172,173,3,21,10,0,173,174,7,3,0,0,174,24,1,0,0,0,175,176,3,
  	17,8,0,176,26,1,0,0,0,177,178,3,19,9,0,178,28,1,0,0,0,179,181,7,2,0,0,
  	180,179,1,0,0,0,180,181,1,0,0,0,181,185,1,0,0,0,182,183,3,21,10,0,183,
  	184,7,2,0,0,184,186,1,0,0,0,185,182,1,0,0,0,185,186,1,0,0,0,186,187,1,
  	0,0,0,187,188,3,23,11,0,188,30,1,0,0,0,189,193,5,34,0,0,190,192,8,4,0,
  	0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,
  	196,1,0,0,0,195,193,1,0,0,0,196,197,5,34,0,0,197,32,1,0,0,0,198,199,5,
  	84,0,0,199,200,5,114,0,0,200,201,5,117,0,0,201,208,5,101,0,0,202,203,
  	5,70,0,0,203,204,5,97,0,0,204,205,5,108,0,0,205,206,5,115,0,0,206,208,
  	5,101,0,0,207,198,1,0,0,0,207,202,1,0,0,0,208,34,1,0,0,0,209,214,3,21,
  	10,0,210,211,5,44,0,0,211,213,3,21,10,0,212,210,1,0,0,0,213,216,1,0,0,
  	0,214,212,1,0,0,0,214,215,1,0,0,0,215,36,1,0,0,0,216,214,1,0,0,0,217,
  	218,5,112,0,0,218,219,5,105,0,0,219,38,1,0,0,0,220,221,5,13,0,0,221,224,
  	5,10,0,0,222,224,7,5,0,0,223,220,1,0,0,0,223,222,1,0,0,0,224,40,1,0,0,
  	0,225,231,5,9,0,0,226,227,5,32,0,0,227,228,5,32,0,0,228,229,5,32,0,0,
  	229,231,5,32,0,0,230,225,1,0,0,0,230,226,1,0,0,0,231,42,1,0,0,0,232,234,
  	7,6,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,
  	0,236,237,1,0,0,0,237,238,6,21,0,0,238,44,1,0,0,0,239,240,5,110,0,0,240,
  	241,5,97,0,0,241,242,5,109,0,0,242,243,5,101,0,0,243,46,1,0,0,0,244,245,
  	5,118,0,0,245,246,5,101,0,0,246,247,5,114,0,0,247,248,5,115,0,0,248,249,
  	5,105,0,0,249,250,5,111,0,0,250,251,5,110,0,0,251,48,1,0,0,0,252,253,
  	5,116,0,0,253,254,5,97,0,0,254,255,5,114,0,0,255,256,5,103,0,0,256,257,
  	5,101,0,0,257,258,5,116,0,0,258,50,1,0,0,0,259,260,5,116,0,0,260,261,
  	5,121,0,0,261,262,5,112,0,0,262,263,5,101,0,0,263,52,1,0,0,0,264,265,
  	5,105,0,0,265,266,5,110,0,0,266,267,5,99,0,0,267,268,5,108,0,0,268,269,
  	5,117,0,0,269,270,5,100,0,0,270,271,5,101,0,0,271,54,1,0,0,0,272,273,
  	5,115,0,0,273,274,5,113,0,0,274,275,5,114,0,0,275,276,5,116,0,0,276,56,
  	1,0,0,0,277,278,5,115,0,0,278,279,5,105,0,0,279,280,5,110,0,0,280,58,
  	1,0,0,0,281,282,5,99,0,0,282,283,5,111,0,0,283,284,5,115,0,0,284,60,1,
  	0,0,0,285,286,5,116,0,0,286,287,5,97,0,0,287,288,5,110,0,0,288,62,1,0,
  	0,0,289,290,5,97,0,0,290,291,5,114,0,0,291,292,5,99,0,0,292,293,5,115,
  	0,0,293,294,5,105,0,0,294,295,5,110,0,0,295,64,1,0,0,0,296,297,5,97,0,
  	0,297,298,5,114,0,0,298,299,5,99,0,0,299,300,5,99,0,0,300,301,5,111,0,
  	0,301,302,5,115,0,0,302,66,1,0,0,0,303,304,5,97,0,0,304,305,5,114,0,0,
  	305,306,5,99,0,0,306,307,5,116,0,0,307,308,5,97,0,0,308,309,5,110,0,0,
  	309,68,1,0,0,0,310,311,5,115,0,0,311,312,5,105,0,0,312,313,5,110,0,0,
  	313,314,5,104,0,0,314,70,1,0,0,0,315,316,5,99,0,0,316,317,5,111,0,0,317,
  	318,5,115,0,0,318,319,5,104,0,0,319,72,1,0,0,0,320,321,5,116,0,0,321,
  	322,5,97,0,0,322,323,5,110,0,0,323,324,5,104,0,0,324,74,1,0,0,0,325,326,
  	5,97,0,0,326,327,5,114,0,0,327,328,5,99,0,0,328,329,5,115,0,0,329,330,
  	5,105,0,0,330,331,5,110,0,0,331,332,5,104,0,0,332,76,1,0,0,0,333,334,
  	5,97,0,0,334,335,5,114,0,0,335,336,5,99,0,0,336,337,5,99,0,0,337,338,
  	5,111,0,0,338,339,5,115,0,0,339,340,5,104,0,0,340,78,1,0,0,0,341,342,
  	5,97,0,0,342,343,5,114,0,0,343,344,5,99,0,0,344,345,5,116,0,0,345,346,
  	5,97,0,0,346,347,5,110,0,0,347,348,5,104,0,0,348,80,1,0,0,0,349,350,5,
  	101,0,0,350,351,5,120,0,0,351,352,5,112,0,0,352,82,1,0,0,0,353,354,5,
  	108,0,0,354,355,5,111,0,0,355,356,5,103,0,0,356,84,1,0,0,0,357,358,5,
  	46,0,0,358,86,1,0,0,0,359,360,5,44,0,0,360,88,1,0,0,0,361,362,5,58,0,
  	0,362,90,1,0,0,0,363,364,5,34,0,0,364,92,1,0,0,0,365,366,5,40,0,0,366,
  	94,1,0,0,0,367,368,5,41,0,0,368,96,1,0,0,0,369,370,5,91,0,0,370,98,1,
  	0,0,0,371,372,5,93,0,0,372,100,1,0,0,0,373,374,5,123,0,0,374,102,1,0,
  	0,0,375,376,5,125,0,0,376,104,1,0,0,0,377,378,5,124,0,0,378,106,1,0,0,
  	0,379,380,5,97,0,0,380,381,5,114,0,0,381,382,5,114,0,0,382,383,5,97,0,
  	0,383,384,5,121,0,0,384,108,1,0,0,0,385,386,5,102,0,0,386,387,5,108,0,
  	0,387,388,5,111,0,0,388,389,5,97,0,0,389,390,5,116,0,0,390,110,1,0,0,
  	0,391,392,5,99,0,0,392,393,5,111,0,0,393,394,5,109,0,0,394,395,5,112,
  	0,0,395,396,5,108,0,0,396,397,5,101,0,0,397,398,5,120,0,0,398,112,1,0,
  	0,0,399,400,5,105,0,0,400,401,5,110,0,0,401,402,5,116,0,0,402,114,1,0,
  	0,0,403,404,5,115,0,0,404,405,5,116,0,0,405,406,5,114,0,0,406,116,1,0,
  	0,0,407,408,5,98,0,0,408,409,5,111,0,0,409,410,5,111,0,0,410,411,5,108,
  	0,0,411,118,1,0,0,0,412,413,5,113,0,0,413,414,3,17,8,0,414,120,1,0,0,
  	0,415,416,5,77,0,0,416,417,5,101,0,0,417,418,5,97,0,0,418,419,5,115,0,
  	0,419,420,5,117,0,0,420,421,5,114,0,0,421,422,5,101,0,0,422,426,1,0,0,
  	0,423,425,7,7,0,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,
  	427,1,0,0,0,427,122,1,0,0,0,428,426,1,0,0,0,429,433,7,7,0,0,430,432,7,
  	8,0,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,
  	434,124,1,0,0,0,435,433,1,0,0,0,436,438,7,9,0,0,437,436,1,0,0,0,438,439,
  	1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,126,1,0,0,0,441,445,5,35,
  	0,0,442,444,8,5,0,0,443,442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,
  	446,1,0,0,0,446,448,1,0,0,0,447,445,1,0,0,0,448,449,6,63,0,0,449,128,
  	1,0,0,0,450,451,9,0,0,0,451,130,1,0,0,0,18,0,154,159,163,166,170,180,
  	185,193,207,214,223,230,235,426,433,439,445,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  blackbirdlexerLexerStaticData = staticData.release();
}

}

blackbirdLexer::blackbirdLexer(CharStream *input) : Lexer(input) {
  blackbirdLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *blackbirdlexerLexerStaticData->atn, blackbirdlexerLexerStaticData->decisionToDFA, blackbirdlexerLexerStaticData->sharedContextCache);
}

blackbirdLexer::~blackbirdLexer() {
  delete _interpreter;
}

std::string blackbirdLexer::getGrammarFileName() const {
  return "blackbird.g4";
}

const std::vector<std::string>& blackbirdLexer::getRuleNames() const {
  return blackbirdlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& blackbirdLexer::getChannelNames() const {
  return blackbirdlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& blackbirdLexer::getModeNames() const {
  return blackbirdlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& blackbirdLexer::getVocabulary() const {
  return blackbirdlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView blackbirdLexer::getSerializedATN() const {
  return blackbirdlexerLexerStaticData->serializedATN;
}

const atn::ATN& blackbirdLexer::getATN() const {
  return *blackbirdlexerLexerStaticData->atn;
}




void blackbirdLexer::initialize() {
  ::antlr4::internal::call_once(blackbirdlexerLexerOnceFlag, blackbirdlexerLexerInitialize);
}
